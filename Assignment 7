//Class Fire
class Fire {
  PVector location, velocity;
  float s, ms;

  Fire(PVector l, PVector v, float s) {
    location = l;
    velocity = v;

    this.s = s;
    ms = s;
  }

  void draw() {
    strokeWeight(1+s/10);
    ellipse(location.x, location.y, s, s); 
    if (s > 0) {
      s-=0.3;
    }else{
       s = ms;
       // Has the flames go in the direction the mouse
       PVector newVelocity = new PVector(mouseX-pmouseX, 0, 0);
       
       //Prints off the magnitude of the newVelocity
       float nV = newVelocity.mag();
       println("The new velocity is: " + nV);
       //Inverts the direction the flames on the x-axis when the mouse is moved
       newVelocity.rotate(PI);
       // Normalizes the velocity causing the flame to remain and not completely go off screen
       newVelocity.normalize();
       // Controls the intensity of the flames
       newVelocity.mult(3);
       // Makes the flames look they are being blown instead of shot 
       newVelocity.y = random(-3, -1);
       newVelocity.x += random(-1, 1);
       // Updates the location and the velocity
       update(new PVector(400, 500), newVelocity);
       
    }
   
  }
  //Update the location and velocity of the flames
  void update(PVector l, PVector v){
    location = l.get(); 
    velocity = v.get();
  }
  //Deals with the motion of the flames and having it look as if it were moving
  void motion(){
    location.add(velocity);
  }
}

////////////////////////////////////////////////////////////////////////////////

//Main 


ArrayList flames = new ArrayList();

void setup() {
  size(800, 600);
  fill(226, 88, 34, 32);
  stroke(255, 0);
  for(int i = 0; i < int(random(200,500)); i++){
    flames.add(new Fire(new PVector(width/2, height/2), new PVector(0, 0), random(10, 30)));
  }
}

void draw() {
  background(0);

   trees();
   //Stars
   noStroke();
   fill(255);
  ellipse(33.0, 36.0, 0.0, 0.0);
  ellipse(37.0, 33.0, 8.0, 8.0);
  ellipse(122.0, 42.0, 0.0, 0.0);
  ellipse(145.0, 35.0, 2.0, 2.0);
  ellipse(282.5, 24.5, 3.0, 3.0);
  ellipse(746.0, 50.0, 2.0, 2.0);
  ellipse(335.0, 72.0, 2.0, 2.0);
  ellipse(596.5, 22.5, 3.0, 3.0);
  ellipse(499.0, 83.0, 2.0, 2.0);
  ellipse(178.5, 60.5, 3.0, 3.0);
  ellipse(58.5, 63.5, 1.0, 1.0);
  ellipse(71.0, 27.0, 6.0, 6.0);
  ellipse(206.0, 23.0, 4.0, 4.0);
  ellipse(236.5, 62.5, 5.0, 5.0);
  ellipse(342.5, 25.5, 7.0, 7.0);
  ellipse(530.0, 21.0, 4.0, 4.0);
  ellipse(543.0, 76.0, 4.0, 4.0);
  ellipse(594.0, 68.0, 6.0, 6.0);
  ellipse(646.5, 19.5, 7.0, 7.0);
  ellipse(767.0, 32.0, 2.0, 2.0);
  ellipse(779.5, 76.5, 3.0, 3.0);
  ellipse(685.5, 54.5, 1.0, 1.0);
  ellipse(118.0, 71.0, 4.0, 4.0);
  ellipse(44.5, 75.5, 1.0, 1.0);
  ellipse(16.5, 61.5, 3.0, 3.0);
  ellipse(17.5, 85.5, 3.0, 3.0);
  ellipse(91.0, 77.0, 4.0, 4.0);
  ellipse(335.0, 218.0, 6.0, 6.0);
  ellipse(299.0, 343.0, 6.0, 6.0);
  ellipse(335.0, 298.0, 0.0, 0.0);
  ellipse(325.0, 293.0, 4.0, 4.0);
  ellipse(383.0, 235.0, 4.0, 4.0);
  ellipse(382.0, 285.0, 0.0, 0.0);
  ellipse(432.5, 279.5, 5.0, 5.0);
  ellipse(461.5, 322.5, 1.0, 1.0);
  ellipse(448.5, 227.5, 3.0, 3.0);
  ellipse(474.5, 275.5, 15.0, 15.0);
  ellipse(475.5, 164.5, 3.0, 3.0);
  ellipse(375.5, 326.5, 1.0, 1.0);
  ellipse(499.0, 147.0, 2.0, 2.0);
  ellipse(326.5, 146.5, 9.0, 9.0);
  ellipse(338.0, 292.0, 0.0, 0.0);
  ellipse(401.5, 325.5, 11.0, 11.0);
  ellipse(455.0, 334.0, 4.0, 4.0);
  ellipse(503.5, 333.5, 3.0, 3.0);
  ellipse(342.5, 327.5, 1.0, 1.0);
  ellipse(358.0, 256.0, 0.0, 0.0);
  ellipse(393.0, 286.0, 4.0, 4.0);
  ellipse(368.0, 307.0, 6.0, 6.0);
  ellipse(356.5, 339.5, 1.0, 1.0);
  ellipse(481.0, 198.0, 0.0, 0.0);
  ellipse(509.0, 181.0, 4.0, 4.0);
  ellipse(479.5, 223.5, 1.0, 1.0);
   
   //Grass
    stroke(#567E3A);
    strokeWeight(200);
    line(0,600,400,400);
    line(800,600,400,400);
    line(0,600,800,600);
    
    //Logs for the fire
    stroke(#663300);
    strokeWeight(30);
    line(360,530,440,485);
    
    stroke(#663300);
    strokeWeight(30);
    line(440,530,360,485);
    
    stroke(#663300);
    strokeWeight(30);
    line(440,530,360,485);
    
    stroke(#663300);
    strokeWeight(30);
    line(440,530,360,485);
    
    
  //This deals with drawing several little particles that the fire is made out of
    stroke(#E22222);
    fill(226, 88, 34, 32);
    strokeWeight(1);
  for(int i = 0; i < flames.size(); i++){
     Fire f = (Fire) flames.get(i);
     f.draw();
     f.motion();
  }
    stroke(#E23822);
    strokeWeight(1);
  for(int i = 0; i < flames.size(); i++){
     Fire f = (Fire) flames.get(i);
     f.draw();
     f.motion();
  }  
    
    stroke(#E29822);
    strokeWeight(1);
  for(int i = 0; i < flames.size(); i++){
     Fire f = (Fire) flames.get(i);
     f.draw();
     f.motion();
  }
  moon();
}
 //Void function for the moon 
 void moon(){
  noStroke();
  rotate(PI/20.0);
  fill(255, 230);
  ellipse(425, 80, 140,140);
  translate(50, 10);
  fill(0);
   rotate(PI/30.0);
  ellipse(425, 80, 140,140);
  
  fill(80);
  scale(.15);
  ellipse(2300, 390, 140,140);
  ellipse(2700, 0, 140,140);
  ellipse(2500, 0, 140,140);
  ellipse(2260, 130, 140,140);
}

//Void function that prints trees
void trees(){
  fill(103, 36, 36);
  stroke(#663300);
  rect(11.0, 285.0, 62.0, 264.0);
  rect(87.0, 205.0, 63.0, 337.0);
  rect(171.0, 159.0, 60.0, 352.0);
  rect(598.0, 147.0, 60.0, 351.0);
  rect(681.0, 143.0, 52.0, 407.0);
  rect(747.0, 150.0, 52.0, 448.0);
  noStroke();
  fill(#22ED14);
  ellipse(47.0, 218.0, 86.0, 100.0);
  ellipse(84.5, 283.0, 91.0, 118.0);
  ellipse(36.0, 281.5, 72.0, 91.0);
  ellipse(23.0, 190.5, 46.0, 61.0);
  ellipse(62.5, 184.0, 71.0, 84.0);
  ellipse(85.5, 339.0, 71.0, 108.0);
  ellipse(79.0, 135.5, 74.0, 73.0);
  ellipse(126.0, 137.0, 72.0, 84.0);
  ellipse(150.0, 181.5, 80.0, 101.0);
  ellipse(98.0, 191.0, 90.0, 100.0);
  ellipse(119.5, 260.5, 99.0, 105.0);
  ellipse(163.5, 249.5, 49.0, 89.0);
  ellipse(120.0, 323.5, 78.0, 101.0);
  ellipse(161.0, 305.0, 56.0, 84.0);
  ellipse(179.0, 126.0, 60.0, 78.0);
  ellipse(203.5, 191.5, 59.0, 81.0);
  ellipse(193.5, 254.0, 79.0, 96.0);
  ellipse(198.0, 328.5, 86.0, 79.0);
  ellipse(163.0, 330.0, 72.0, 60.0);
  ellipse(235.5, 312.5, 81.0, 87.0);
  ellipse(263.0, 280.0, 82.0, 48.0);
  ellipse(264.0, 247.5, 92.0, 47.0);
  ellipse(242.5, 205.5, 63.0, 85.0);
  ellipse(275.0, 193.5, 60.0, 77.0);
  ellipse(254.5, 157.5, 83.0, 71.0);
  ellipse(221.0, 133.0, 68.0, 70.0);
  ellipse(258.5, 128.5, 59.0, 43.0);
  ellipse(277.0, 169.0, 40.0, 100.0);
  ellipse(183.0, 204.5, 60.0, 93.0);
  ellipse(233.5, 214.0, 157.0, 152.0);
  ellipse(204.0, 193.0, 80.0, 60.0);
  ellipse(266.5, 209.5, 65.0, 111.0);
  ellipse(195.5, 241.5, 95.0, 13.0);
  ellipse(227.0, 242.0, 120.0, 122.0);
  ellipse(159.0, 189.5, 84.0, 23.0);
  ellipse(128.0, 236.5, 82.0, 125.0);
  ellipse(591.0, 145.5, 82.0, 111.0);
  ellipse(670.0, 145.0, 110.0, 144.0);
  ellipse(741.5, 145.5, 71.0, 99.0);
  ellipse(593.5, 235.5, 93.0, 111.0);
  ellipse(753.0, 225.5, 52.0, 99.0);
  ellipse(776.5, 205.0, 45.0, 80.0);
  ellipse(779.0, 169.5, 40.0, 85.0);
  ellipse(763.0, 313.5, 72.0, 97.0);
  ellipse(793.0, 269.0, 12.0, 58.0);
  ellipse(746.0, 118.0, 4.0, 2.0);
  ellipse(772.0, 246.0, 54.0, 132.0);
  ellipse(741.0, 238.5, 74.0, 105.0);
  ellipse(731.5, 222.5, 121.0, 95.0);
  ellipse(722.5, 303.0, 53.0, 88.0);
  ellipse(689.5, 254.0, 61.0, 86.0);
  ellipse(703.5, 330.0, 103.0, 100.0);
  ellipse(676.0, 237.0, 70.0, 90.0);
  ellipse(648.5, 285.5, 83.0, 99.0);
  ellipse(645.0, 349.0, 116.0, 112.0);
  ellipse(613.0, 281.0, 86.0, 76.0);
  ellipse(591.0, 295.0, 54.0, 96.0);
  ellipse(588.0, 278.0, 108.0, 80.0);
  ellipse(561.5, 226.0, 43.0, 94.0);
  ellipse(552.0, 235.5, 82.0, 67.0);
  ellipse(556.0, 166.0, 66.0, 98.0);
  ellipse(556.5, 295.0, 99.0, 80.0);
  ellipse(573.0, 356.0, 84.0, 66.0);
  ellipse(529.0, 254.5, 60.0, 101.0);
  ellipse(553.5, 209.5, 89.0, 89.0);
  ellipse(547.0, 143.0, 52.0, 64.0);
  ellipse(637.5, 109.0, 65.0, 52.0);
  ellipse(721.5, 118.0, 37.0, 66.0);
  ellipse(772.5, 160.0, 33.0, 72.0);
  ellipse(728.0, 382.0, 54.0, 80.0);
  ellipse(773.0, 387.0, 52.0, 96.0);
  ellipse(652.5, 185.5, 43.0, 131.0);
  ellipse(650.5, 316.5, 29.0, 131.0);
  ellipse(662.0, 183.5, 112.0, 103.0);
  ellipse(672.5, 179.5, 99.0, 55.0);
  ellipse(31.5, 142.0, 63.0, 76.0);
  ellipse(8.0, 155.0, 16.0, 76.0);
  ellipse(756.0, 130.5, 48.0, 57.0);
  ellipse(790.0, 142.0, 18.0, 66.0);
  ellipse(786.5, 122.0, 25.0, 30.0);
  ellipse(66.5, 110.5, 33.0, 47.0);
  ellipse(43.5, 350.5, 73.0, 101.0);
  ellipse(8.5, 358.5, 17.0, 105.0);
  ellipse(193.0, 220.0, 72.0, 104.0);
  ellipse(222.0, 182.5, 76.0, 115.0);
  ellipse(236.5, 277.5, 57.0, 101.0);
  ellipse(276.5, 220.5, 59.0, 117.0);
  ellipse(591.0, 241.5, 104.0, 141.0);
  ellipse(548.5, 307.0, 55.0, 94.0);
  ellipse(653.5, 295.0, 57.0, 110.0);
  ellipse(672.0, 237.5, 78.0, 97.0);
  ellipse(629.5, 173.0, 101.0, 86.0);
  ellipse(686.0, 166.0, 102.0, 122.0);
  ellipse(767.5, 168.5, 63.0, 103.0);
  ellipse(761.0, 247.5, 74.0, 113.0);
  ellipse(740.5, 270.5, 49.0, 115.0);
  ellipse(716.5, 339.5, 71.0, 85.0);
  ellipse(725.5, 301.5, 65.0, 77.0);
  ellipse(787.0, 344.5, 24.0, 73.0);
  ellipse(780.0, 327.5, 32.0, 73.0);
  ellipse(751.5, 357.5, 89.0, 51.0);
  ellipse(668.0, 316.5, 64.0, 97.0);
  ellipse(649.5, 325.0, 79.0, 104.0);
  ellipse(622.5, 342.5, 67.0, 73.0);
  ellipse(145.5, 195.0, 81.0, 92.0);
  ellipse(73.5, 229.0, 99.0, 88.0);
  ellipse(11.0, 234.5, 22.0, 79.0);
  ellipse(56.5, 276.5, 77.0, 63.0);
  ellipse(153.5, 272.0, 69.0, 82.0);
  ellipse(66.5, 175.5, 65.0, 71.0);
  ellipse(70.5, 119.5, 83.0, 61.0);
  ellipse(122.5, 119.0, 61.0, 62.0);
  ellipse(172.5, 113.0, 41.0, 54.0);
  stroke(0);
  strokeWeight(1);
  line(76.0, 181.0, 75.0, 260.0);
  line(29.0, 253.0, 26.0, 356.0);
  line(100.0, 291.0, 84.0, 347.0);
  line(173.0, 148.0, 165.0, 219.0);
  line(227.0, 153.0, 257.0, 227.0);
  line(562.0, 146.0, 540.0, 251.0);
  line(643.0, 147.0, 646.0, 234.0);
  line(592.0, 257.0, 568.0, 331.0);
  line(721.0, 143.0, 751.0, 235.0);
  line(708.0, 236.0, 688.0, 318.0);
  line(753.0, 265.0, 772.0, 386.0);
  line(625.0, 275.0, 657.0, 355.0);
  line(120.0, 107.0, 113.0, 178.0);
}
